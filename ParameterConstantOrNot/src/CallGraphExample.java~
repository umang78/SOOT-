//package dk.brics.soot.callgraphs;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import soot.MethodOrMethodContext;
import soot.PackManager;
import soot.Scene;
import soot.SceneTransformer;
import soot.SootClass;
import soot.SootMethod;
import soot.Transform;
import soot.jimple.StringConstant;
import soot.jimple.NumericConstant;
import soot.jimple.ReturnStmt;
import soot.jimple.Stmt;
import soot.jimple.Constant;
import soot.jimple.InvokeExpr;
import soot.Unit;
import soot.Body;
import soot.ValueBox;
import soot.jimple.IntConstant;
import soot.Value;
import soot.jimple.toolkits.callgraph.CHATransformer;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.jimple.toolkits.callgraph.Targets;

public class CallGraphExample
{	
	public static void main(String[] args) {

		
	   List<String> argsList = new ArrayList<String>(Arrays.asList(args));
	   argsList.addAll(Arrays.asList(new String[]{
			   "-w",
			   "-main-class",
			   "testers.CallGraphs",//main-class
			   "testers.CallGraphs"
	   }));
	

	   PackManager.v().getPack("wjtp").add(new Transform("wjtp.myTrans", new SceneTransformer() {

		@Override
		protected void internalTransform(String phaseName, Map options) {
		       CHATransformer.v().transform();
                      // SootClass a = Scene.v().getSootClass("testers.A");

//		       SootClass src = Scene.v().loadClassAndSupport("testers.CallGraphs");
		     //  CallGraph cg = Scene.v().getCallGraph();
	      // List<SootMethod> l=new ArrayList();       
		     // l= src.getMethods();

		       //Iterator targets = l.iterator();
		       /*while (targets.hasNext()) {
		    	   
		           SootMethod tgt = (SootMethod)targets.next();
		           System.out.println("Methods in main class are..."+tgt);
			*/

		       SootMethod sm = Scene.v().getMainClass().getMethodByName("main");
		 	if (sm.hasActiveBody())
			{
		      			Body methodBody = sm.retrieveActiveBody();
		      			for (Unit u : methodBody.getUnits()) {
									if (u instanceof ReturnStmt) {
									  if (((ReturnStmt) u).getOp() instanceof Constant) {
							      		System.out.println("");
							  		}//end of inner if......
								     }//end of outer if... 
			
									else if (((Stmt) u).containsInvokeExpr()) {
							  		InvokeExpr ie = ((Stmt) u).getInvokeExpr();
							 		 for (Value arg : ie.getArgs()) {
									System.out.println("Arguments....."+arg);
									
							    		if (arg instanceof StringConstant || arg instanceof NumericConstant ||arg instanceof IntConstant) {
							      		System.out.println("Constant");
							    		}//end of if....
								  }//end of for loop.....
								}//end of else if....
			}//end of if.....
		       }//end of while loop....
		}
		   
	   }));

           args = argsList.toArray(new String[0]);
                      System.out.println("KKKKKKKKKKKKk");
           soot.Main.main(args);
	}
}
